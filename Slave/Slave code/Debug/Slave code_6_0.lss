
Slave code_6_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000444  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d6f  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000720  00000000  00000000  0000135b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007fd  00000000  00000000  00001a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00002278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d4  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000716  00000000  00000000  000028ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002fc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	77 00       	.word	0x0077	; ????
  56:	8a 00       	.word	0x008a	; ????
  58:	9d 00       	.word	0x009d	; ????
  5a:	6a 00       	.word	0x006a	; ????
  5c:	6a 00       	.word	0x006a	; ????
  5e:	6a 00       	.word	0x006a	; ????
  60:	6a 00       	.word	0x006a	; ????
  62:	6a 00       	.word	0x006a	; ????
  64:	6a 00       	.word	0x006a	; ????
  66:	6a 00       	.word	0x006a	; ????
  68:	6a 00       	.word	0x006a	; ????
  6a:	6a 00       	.word	0x006a	; ????
  6c:	6a 00       	.word	0x006a	; ????
  6e:	6a 00       	.word	0x006a	; ????
  70:	6a 00       	.word	0x006a	; ????
  72:	6a 00       	.word	0x006a	; ????
  74:	b0 00       	.word	0x00b0	; ????
  76:	b5 00       	.word	0x00b5	; ????
  78:	ba 00       	.word	0x00ba	; ????
  7a:	6a 00       	.word	0x006a	; ????
  7c:	6a 00       	.word	0x006a	; ????
  7e:	6a 00       	.word	0x006a	; ????
  80:	6a 00       	.word	0x006a	; ????
  82:	6a 00       	.word	0x006a	; ????
  84:	6a 00       	.word	0x006a	; ????
  86:	6a 00       	.word	0x006a	; ????
  88:	6a 00       	.word	0x006a	; ????
  8a:	6a 00       	.word	0x006a	; ????
  8c:	6a 00       	.word	0x006a	; ????
  8e:	6a 00       	.word	0x006a	; ????
  90:	6a 00       	.word	0x006a	; ????
  92:	6a 00       	.word	0x006a	; ????
  94:	bf 00       	.word	0x00bf	; ????
  96:	c4 00       	.word	0x00c4	; ????
  98:	c9 00       	.word	0x00c9	; ????

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf e5       	ldi	r28, 0x5F	; 95
  a0:	d8 e0       	ldi	r29, 0x08	; 8
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  aa:	0c 94 20 02 	jmp	0x440	; 0x440 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:


int main(void)
{
	
	SPI_vInitSlave();//initialize the SPI as a slave
  b2:	0e 94 12 02 	call	0x424	; 0x424 <SPI_vInitSlave>
	
	/* initialization of output pins of connected leds or devices */

	LED_vInit(ROOM1_PORT,ROOM1_PIN);
  b6:	64 e0       	ldi	r22, 0x04	; 4
  b8:	84 e4       	ldi	r24, 0x44	; 68
  ba:	0e 94 ce 00 	call	0x19c	; 0x19c <LED_vInit>
	LED_vInit(ROOM2_PORT,ROOM2_PIN);
  be:	65 e0       	ldi	r22, 0x05	; 5
  c0:	84 e4       	ldi	r24, 0x44	; 68
  c2:	0e 94 ce 00 	call	0x19c	; 0x19c <LED_vInit>
	LED_vInit(ROOM3_PORT,ROOM3_PIN);
  c6:	66 e0       	ldi	r22, 0x06	; 6
  c8:	84 e4       	ldi	r24, 0x44	; 68
  ca:	0e 94 ce 00 	call	0x19c	; 0x19c <LED_vInit>

	
	uint8 request = DEFAULT_ACK;//the value that is received from the master
	uint8 response = DEFAULT_ACK;//the values that is sent back to the master
  ce:	cf ef       	ldi	r28, 0xFF	; 255
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM3_STATUS:
			if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
  d0:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
  d2:	11 e0       	ldi	r17, 0x01	; 1
	uint8 request = DEFAULT_ACK;//the value that is received from the master
	uint8 response = DEFAULT_ACK;//the values that is sent back to the master
	
	while(1)
	{
		request = SPI_ui8TransmitRecive(DEFAULT_ACK);//wait for the master to start the transmitting
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_ui8TransmitRecive>
		//ALL Messages are defined in STD_messages.h
		switch (request)
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	fc 01       	movw	r30, r24
  de:	71 97       	sbiw	r30, 0x11	; 17
  e0:	e3 32       	cpi	r30, 0x23	; 35
  e2:	f1 05       	cpc	r31, r1
  e4:	b8 f7       	brcc	.-18     	; 0xd4 <main+0x22>
  e6:	e6 5d       	subi	r30, 0xD6	; 214
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	0c 94 1a 02 	jmp	0x434	; 0x434 <__tablejump2__>
		{
			/*********************************   STATUS COMMANDS ********************************/
			//commands related to send the current status back to the master
			case ROOM1_STATUS:
			if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==0)//if the led is turned off
  ee:	64 e0       	ldi	r22, 0x04	; 4
  f0:	84 e4       	ldi	r24, 0x44	; 68
  f2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_u8ReadStatus>
  f6:	88 23       	and	r24, r24
  f8:	41 f0       	breq	.+16     	; 0x10a <main+0x58>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==1)//if the led is turned on
  fa:	64 e0       	ldi	r22, 0x04	; 4
  fc:	84 e4       	ldi	r24, 0x44	; 68
  fe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_u8ReadStatus>
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	19 f4       	brne	.+6      	; 0x10c <main+0x5a>
			{
				response = ON_STATUS;//set the response as on status
 106:	c1 2f       	mov	r28, r17
 108:	01 c0       	rjmp	.+2      	; 0x10c <main+0x5a>
			/*********************************   STATUS COMMANDS ********************************/
			//commands related to send the current status back to the master
			case ROOM1_STATUS:
			if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 10a:	cd 2f       	mov	r28, r29
				response = ON_STATUS;//set the response as on status
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 10c:	8c 2f       	mov	r24, r28
 10e:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_ui8TransmitRecive>
			break;//break the switch case
 112:	e0 cf       	rjmp	.-64     	; 0xd4 <main+0x22>
			case ROOM2_STATUS:
			if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==0)//if the led is turned off
 114:	65 e0       	ldi	r22, 0x05	; 5
 116:	84 e4       	ldi	r24, 0x44	; 68
 118:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_u8ReadStatus>
 11c:	88 23       	and	r24, r24
 11e:	41 f0       	breq	.+16     	; 0x130 <main+0x7e>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==1)//if the led is turned on
 120:	65 e0       	ldi	r22, 0x05	; 5
 122:	84 e4       	ldi	r24, 0x44	; 68
 124:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_u8ReadStatus>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	19 f4       	brne	.+6      	; 0x132 <main+0x80>
			{
				response = ON_STATUS;//set the response as on status
 12c:	c1 2f       	mov	r28, r17
 12e:	01 c0       	rjmp	.+2      	; 0x132 <main+0x80>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM2_STATUS:
			if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 130:	cd 2f       	mov	r28, r29
				response = ON_STATUS;//set the response as on status
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 132:	8c 2f       	mov	r24, r28
 134:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_ui8TransmitRecive>
			break;//break the switch case
 138:	cd cf       	rjmp	.-102    	; 0xd4 <main+0x22>
			case ROOM3_STATUS:
			if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led is turned off
 13a:	66 e0       	ldi	r22, 0x06	; 6
 13c:	84 e4       	ldi	r24, 0x44	; 68
 13e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_u8ReadStatus>
 142:	88 23       	and	r24, r24
 144:	41 f0       	breq	.+16     	; 0x156 <main+0xa4>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==1)//if the led is turned on
 146:	66 e0       	ldi	r22, 0x06	; 6
 148:	84 e4       	ldi	r24, 0x44	; 68
 14a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_u8ReadStatus>
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	19 f4       	brne	.+6      	; 0x158 <main+0xa6>
			{
				response = ON_STATUS;//set the response as on status
 152:	c1 2f       	mov	r28, r17
 154:	01 c0       	rjmp	.+2      	; 0x158 <main+0xa6>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM3_STATUS:
			if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 156:	cd 2f       	mov	r28, r29
				response = ON_STATUS;//set the response as on status
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 158:	8c 2f       	mov	r24, r28
 15a:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_ui8TransmitRecive>
			break;//break the switch case
 15e:	ba cf       	rjmp	.-140    	; 0xd4 <main+0x22>
			
			
			/*********************************   TURN ON COMMANDS ********************************/
			case ROOM1_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM1_PIN);//turn on the led of room 1
 160:	64 e0       	ldi	r22, 0x04	; 4
 162:	84 e4       	ldi	r24, 0x44	; 68
 164:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_vTurnOn>
			break;//break the switch case
 168:	b5 cf       	rjmp	.-150    	; 0xd4 <main+0x22>
			case ROOM2_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM2_PIN);//turn on the led of room 2
 16a:	65 e0       	ldi	r22, 0x05	; 5
 16c:	84 e4       	ldi	r24, 0x44	; 68
 16e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_vTurnOn>
			break;//break the switch case
 172:	b0 cf       	rjmp	.-160    	; 0xd4 <main+0x22>
			case ROOM3_TURN_ON:
			LED_vTurnOn(ROOM3_PORT,ROOM3_PIN);//turn on the led of room 3
 174:	66 e0       	ldi	r22, 0x06	; 6
 176:	84 e4       	ldi	r24, 0x44	; 68
 178:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_vTurnOn>
			break;//break the switch case
 17c:	ab cf       	rjmp	.-170    	; 0xd4 <main+0x22>
			
			
			/*********************************   TURN OFF COMMANDS ********************************/
			case ROOM1_TURN_OFF:
			LED_vTurnOff(ROOM1_PORT,ROOM1_PIN);//turn off the led of room 1
 17e:	64 e0       	ldi	r22, 0x04	; 4
 180:	84 e4       	ldi	r24, 0x44	; 68
 182:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LED_vTurnOff>
			break;//break the switch case
 186:	a6 cf       	rjmp	.-180    	; 0xd4 <main+0x22>
			case ROOM2_TURN_OFF:
			LED_vTurnOff(ROOM2_PORT,ROOM2_PIN);//turn off the led of room 2
 188:	65 e0       	ldi	r22, 0x05	; 5
 18a:	84 e4       	ldi	r24, 0x44	; 68
 18c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LED_vTurnOff>
			break;//break the switch case
 190:	a1 cf       	rjmp	.-190    	; 0xd4 <main+0x22>
			case ROOM3_TURN_OFF:
			LED_vTurnOff(ROOM3_PORT,ROOM3_PIN);//turn off the led of room 3
 192:	66 e0       	ldi	r22, 0x06	; 6
 194:	84 e4       	ldi	r24, 0x44	; 68
 196:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LED_vTurnOff>
			break;//break the switch case
 19a:	9c cf       	rjmp	.-200    	; 0xd4 <main+0x22>

0000019c <LED_vInit>:
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
}
void LED_vToggle(uint8 portname,uint8 pinnumber)
{
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_vsetPINDir>
 1a2:	08 95       	ret

000001a4 <LED_vTurnOn>:
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_write>
 1aa:	08 95       	ret

000001ac <LED_vTurnOff>:
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_write>
 1b2:	08 95       	ret

000001b4 <LED_u8ReadStatus>:
}
uint8 LED_u8ReadStatus(uint8 portname,uint8 pinnumber)
{
	return DIO_u8read(portname,pinnumber);//return the current status of the given pin
 1b4:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_u8read>
}
 1b8:	08 95       	ret

000001ba <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"
#include "DIO.h"
void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
	switch(portname)
 1ba:	82 34       	cpi	r24, 0x42	; 66
 1bc:	19 f1       	breq	.+70     	; 0x204 <DIO_vsetPINDir+0x4a>
 1be:	18 f4       	brcc	.+6      	; 0x1c6 <DIO_vsetPINDir+0xc>
 1c0:	81 34       	cpi	r24, 0x41	; 65
 1c2:	39 f0       	breq	.+14     	; 0x1d2 <DIO_vsetPINDir+0x18>
 1c4:	08 95       	ret
 1c6:	83 34       	cpi	r24, 0x43	; 67
 1c8:	b1 f1       	breq	.+108    	; 0x236 <DIO_vsetPINDir+0x7c>
 1ca:	84 34       	cpi	r24, 0x44	; 68
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <DIO_vsetPINDir+0x16>
 1ce:	4c c0       	rjmp	.+152    	; 0x268 <DIO_vsetPINDir+0xae>
 1d0:	08 95       	ret
	{
		
		
		case 'A':
		if(direction==1)
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	59 f4       	brne	.+22     	; 0x1ec <DIO_vsetPINDir+0x32>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
 1d6:	2a b3       	in	r18, 0x1a	; 26
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_vsetPINDir+0x28>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_vsetPINDir+0x24>
 1e6:	82 2b       	or	r24, r18
 1e8:	8a bb       	out	0x1a, r24	; 26
 1ea:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
 1ec:	2a b3       	in	r18, 0x1a	; 26
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_vsetPINDir+0x3e>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_vsetPINDir+0x3a>
 1fc:	80 95       	com	r24
 1fe:	82 23       	and	r24, r18
 200:	8a bb       	out	0x1a, r24	; 26
 202:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 204:	41 30       	cpi	r20, 0x01	; 1
 206:	59 f4       	brne	.+22     	; 0x21e <DIO_vsetPINDir+0x64>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 208:	27 b3       	in	r18, 0x17	; 23
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_vsetPINDir+0x5a>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_vsetPINDir+0x56>
 218:	82 2b       	or	r24, r18
 21a:	87 bb       	out	0x17, r24	; 23
 21c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 21e:	27 b3       	in	r18, 0x17	; 23
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_vsetPINDir+0x70>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_vsetPINDir+0x6c>
 22e:	80 95       	com	r24
 230:	82 23       	and	r24, r18
 232:	87 bb       	out	0x17, r24	; 23
 234:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	59 f4       	brne	.+22     	; 0x250 <DIO_vsetPINDir+0x96>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 23a:	24 b3       	in	r18, 0x14	; 20
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_vsetPINDir+0x8c>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_vsetPINDir+0x88>
 24a:	82 2b       	or	r24, r18
 24c:	84 bb       	out	0x14, r24	; 20
 24e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 250:	24 b3       	in	r18, 0x14	; 20
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_vsetPINDir+0xa2>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_vsetPINDir+0x9e>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	84 bb       	out	0x14, r24	; 20
 266:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	59 f4       	brne	.+22     	; 0x282 <DIO_vsetPINDir+0xc8>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 26c:	21 b3       	in	r18, 0x11	; 17
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_vsetPINDir+0xbe>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_vsetPINDir+0xba>
 27c:	82 2b       	or	r24, r18
 27e:	81 bb       	out	0x11, r24	; 17
 280:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 282:	21 b3       	in	r18, 0x11	; 17
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vsetPINDir+0xd4>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vsetPINDir+0xd0>
 292:	80 95       	com	r24
 294:	82 23       	and	r24, r18
 296:	81 bb       	out	0x11, r24	; 17
 298:	08 95       	ret

0000029a <DIO_write>:
}


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
	switch(portname)
 29a:	82 34       	cpi	r24, 0x42	; 66
 29c:	19 f1       	breq	.+70     	; 0x2e4 <DIO_write+0x4a>
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <DIO_write+0xc>
 2a0:	81 34       	cpi	r24, 0x41	; 65
 2a2:	39 f0       	breq	.+14     	; 0x2b2 <DIO_write+0x18>
 2a4:	08 95       	ret
 2a6:	83 34       	cpi	r24, 0x43	; 67
 2a8:	b1 f1       	breq	.+108    	; 0x316 <DIO_write+0x7c>
 2aa:	84 34       	cpi	r24, 0x44	; 68
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <DIO_write+0x16>
 2ae:	4c c0       	rjmp	.+152    	; 0x348 <DIO_write+0xae>
 2b0:	08 95       	ret
	{
		case 'A' :
		
		if(outputvalue==1)
 2b2:	41 30       	cpi	r20, 0x01	; 1
 2b4:	59 f4       	brne	.+22     	; 0x2cc <DIO_write+0x32>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 2b6:	2b b3       	in	r18, 0x1b	; 27
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_write+0x28>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_write+0x24>
 2c6:	82 2b       	or	r24, r18
 2c8:	8b bb       	out	0x1b, r24	; 27
 2ca:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 2cc:	2b b3       	in	r18, 0x1b	; 27
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_write+0x3e>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_write+0x3a>
 2dc:	80 95       	com	r24
 2de:	82 23       	and	r24, r18
 2e0:	8b bb       	out	0x1b, r24	; 27
 2e2:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 2e4:	41 30       	cpi	r20, 0x01	; 1
 2e6:	59 f4       	brne	.+22     	; 0x2fe <DIO_write+0x64>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 2e8:	28 b3       	in	r18, 0x18	; 24
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_write+0x5a>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_write+0x56>
 2f8:	82 2b       	or	r24, r18
 2fa:	88 bb       	out	0x18, r24	; 24
 2fc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 2fe:	28 b3       	in	r18, 0x18	; 24
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_write+0x70>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_write+0x6c>
 30e:	80 95       	com	r24
 310:	82 23       	and	r24, r18
 312:	88 bb       	out	0x18, r24	; 24
 314:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 316:	41 30       	cpi	r20, 0x01	; 1
 318:	59 f4       	brne	.+22     	; 0x330 <DIO_write+0x96>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 31a:	25 b3       	in	r18, 0x15	; 21
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_write+0x8c>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_write+0x88>
 32a:	82 2b       	or	r24, r18
 32c:	85 bb       	out	0x15, r24	; 21
 32e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 330:	25 b3       	in	r18, 0x15	; 21
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_write+0xa2>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_write+0x9e>
 340:	80 95       	com	r24
 342:	82 23       	and	r24, r18
 344:	85 bb       	out	0x15, r24	; 21
 346:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 348:	41 30       	cpi	r20, 0x01	; 1
 34a:	59 f4       	brne	.+22     	; 0x362 <DIO_write+0xc8>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 34c:	22 b3       	in	r18, 0x12	; 18
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_write+0xbe>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_write+0xba>
 35c:	82 2b       	or	r24, r18
 35e:	82 bb       	out	0x12, r24	; 18
 360:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 362:	22 b3       	in	r18, 0x12	; 18
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_write+0xd4>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_write+0xd0>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	82 bb       	out	0x12, r24	; 18
 378:	08 95       	ret

0000037a <DIO_u8read>:


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
	switch(portname)
 37a:	82 34       	cpi	r24, 0x42	; 66
 37c:	d9 f0       	breq	.+54     	; 0x3b4 <DIO_u8read+0x3a>
 37e:	18 f4       	brcc	.+6      	; 0x386 <DIO_u8read+0xc>
 380:	81 34       	cpi	r24, 0x41	; 65
 382:	31 f0       	breq	.+12     	; 0x390 <DIO_u8read+0x16>
 384:	4d c0       	rjmp	.+154    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 386:	83 34       	cpi	r24, 0x43	; 67
 388:	39 f1       	breq	.+78     	; 0x3d8 <DIO_u8read+0x5e>
 38a:	84 34       	cpi	r24, 0x44	; 68
 38c:	b9 f1       	breq	.+110    	; 0x3fc <DIO_u8read+0x82>
 38e:	48 c0       	rjmp	.+144    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
	{
		case 'A' :
		return_value=Read_bIT(PINA,pinnumber);//Read the value from the given pin in port A
 390:	29 b3       	in	r18, 0x19	; 25
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	06 2e       	mov	r0, r22
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_u8read+0x24>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	0a 94       	dec	r0
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_u8read+0x20>
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	82 23       	and	r24, r18
 3a6:	93 23       	and	r25, r19
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_u8read+0x34>
 3aa:	95 95       	asr	r25
 3ac:	87 95       	ror	r24
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_u8read+0x30>
		break;
 3b2:	08 95       	ret
		
		case 'B' :
		return_value=Read_bIT(PINB,pinnumber);//Read the value from the given pin in port B
 3b4:	26 b3       	in	r18, 0x16	; 22
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	06 2e       	mov	r0, r22
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_u8read+0x48>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_u8read+0x44>
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	82 23       	and	r24, r18
 3ca:	93 23       	and	r25, r19
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_u8read+0x58>
 3ce:	95 95       	asr	r25
 3d0:	87 95       	ror	r24
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_u8read+0x54>
		break;
 3d6:	08 95       	ret
		
		case 'C' :
		return_value=Read_bIT(PINC,pinnumber);//Read the value from the given pin in port C
 3d8:	23 b3       	in	r18, 0x13	; 19
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	06 2e       	mov	r0, r22
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_u8read+0x6c>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_u8read+0x68>
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	82 23       	and	r24, r18
 3ee:	93 23       	and	r25, r19
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_u8read+0x7c>
 3f2:	95 95       	asr	r25
 3f4:	87 95       	ror	r24
 3f6:	6a 95       	dec	r22
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_u8read+0x78>
		break;
 3fa:	08 95       	ret
		
		case 'D' :
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
 3fc:	20 b3       	in	r18, 0x10	; 16
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	06 2e       	mov	r0, r22
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	0a 94       	dec	r0
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	82 23       	and	r24, r18
 412:	93 23       	and	r25, r19
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	95 95       	asr	r25
 418:	87 95       	ror	r24
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		break;
 41e:	08 95       	ret
}


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
 420:	80 e0       	ldi	r24, 0x00	; 0
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
		break;
		default: break;
	}
	return return_value ;
}
 422:	08 95       	ret

00000424 <SPI_vInitSlave>:
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
}

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
 424:	be 9a       	sbi	0x17, 6	; 23
	SPCR |= (1<<SPE);//Enable the SPI
 426:	6e 9a       	sbi	0x0d, 6	; 13
 428:	08 95       	ret

0000042a <SPI_ui8TransmitRecive>:
}

uint8 SPI_ui8TransmitRecive (uint8 data)
{
	SPDR = data;//move the given data to SPI Data register
 42a:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
 42c:	77 9b       	sbis	0x0e, 7	; 14
 42e:	fe cf       	rjmp	.-4      	; 0x42c <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
 430:	8f b1       	in	r24, 0x0f	; 15
 432:	08 95       	ret

00000434 <__tablejump2__>:
 434:	ee 0f       	add	r30, r30
 436:	ff 1f       	adc	r31, r31
 438:	05 90       	lpm	r0, Z+
 43a:	f4 91       	lpm	r31, Z
 43c:	e0 2d       	mov	r30, r0
 43e:	09 94       	ijmp

00000440 <_exit>:
 440:	f8 94       	cli

00000442 <__stop_program>:
 442:	ff cf       	rjmp	.-2      	; 0x442 <__stop_program>
